/*はじめに*/
ロード画面は今やどのゲームにもあるものですが、
学生作品では、ボリュームが少なくシーン移行もスムーズに行われるため、
どうしても追加されないことが多いですが、
将来企業に入った場合100%使うと思うので共有します。
自分なりにわかりやすく説明しているので、参考になれば幸いです。



/*注意事項*/
データが消えたりしても一切の責任を負いません。
使用する際は自己責任でお願いします。
分からないことがあればDiscordのDMで直接聞いてくれれば、
できる限りのサポートはします。

また、今回のシステムはFadeSystemを使っていますが、FadeSystemについては説明しません。
FadeSystemの説明は、前回配布したFadeSystemを見てください。



/*Scene1について*/
1280 × 720 に解像度を変更してください。
ビルド設定でScene1とScene2、LoadSceneをアタッチしてください。
画面をクリックすると1秒かけて画面を暗くし、LoadSceneに移行します。
LoadSceneに移行すると1秒かけてFadeOutされ、終わったら裏でScene2を読み込み始めます。
読み込みが終わり次第Scene2に移行します。
Scene2が軽いため一瞬でシーンの読み込みが完了し、
Scene2に行きますがバグではないので安心してください。



/*ProjectにLoadSystemの導入方法*/
Load画面を出したいときに
fade.FadeIn(1f, () => SceneManager.LoadScene("LoadScene"));
で、LoadSceneに移行させます。Load.csの36行目に次に移行したいSceneを書きます。
ロードシーン後に読み込みたいシーンが複数ある場合は、ifとelseifとSLを使って区別します。
詳しくは/*Load.csについて*/を参照してください。



/*Load.csについて*/
スクリプトにある程度の説明を書いておいたので大事な部分だけ説明します。
loadingTextはLoadSceneの右下にある%を書いてあるTextです。読み込みの完了した分だけ数字が増えます。
loadingBarはLoadSceneの下にあるバーです。読み込みが完了した分だけ右に行きます。valueの数値を変えて動かします。
LoadSceneAsyncは裏でシーンを読み込んでくれます。
ロード後に移行したいシーンが複数ある場合はif分を使って管理するのお勧めします。
LoadSceneを呼び出す前にSL変数の値を設定して、区別してください。
async.allowSceneActivationをfalseにすることで読み込みが終わってもシーン移行しないようにしています。
async.progressは読み込みの進捗を表しています。(0～1)
仕様なのかバグなのかわかりませんがasync.progressはすべて読み込んでも0.9までしか上がらないので、
0.9になったらループを抜けて1にしています。



/*LoadScnenについて*/
デザインを変えたい場合はLoadCanvasの中のスプライトなどを変えてください。
変えた場合Loadオブジェクトを確認し、アタッチされてないものがあればアタッチしてください。
デフォルトのイラストは有料のAssetのものですがめんどくさかったので使ってください。



/*参考サイト*/
https://masayuki5160.hatenablog.com/entry/2014/01/21/235641
http://nekobata.blog.jp/archives/1034459004.html
https://developers.wonderpla.net/entry/2014/09/02/205829